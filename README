les
===

This is a pager program similar to less and more. It is written in
C using the terminfo, iconv, and pcre2 libraries.

Status Bar
==========

At the bottom of the screen is a status bar that shows the filename,
current line number over the total number of lines, and the number
of bytes of the input. Your progress through the file is shown with
a dark blue background color. The current page is represented as a
lighter blue background color. This gives a good visual representation
of how far into the file you are.

Tab bar
=======

If you open multiple files, the top line will show them all as a
list of tabs. Press t and T to cycle through them, q to close one,
and Q to close all of them.

Unicode
=======

The reason this program needs to handle Unicode is to get the right
number of characters on a line. This requires the program to know
the number of bytes in each character, and the screen width of the
character (characters in Unicode can take 0, 1, or 2 widths). the
input file is assumed to be UTF-8. if it isn't, then you can give
the correct encoding with the -e (encoding) option.

Searching
=========

When you search, all matches will be highlighted in blue, the one
you are up to in green. If the match is on the page you are currently
viewing the page will not move. if it is less than a page away,
then it will only move as far as it needs to show the next match.
if the match is further away then it will position the screen with
the match in the center. This is similar to how vim shows matches
not less.

Man Pages
=========

You can set your man page output to be piped through les by adding
the following to your .bashrc:

    export PAGER=les

Git diff
========

You can set les to be your git diff viewer by adding the following
to your .gitconfig:

    [core]
        pager = les

lespipe script
==============

Files opened in les are processed through the lespipe script. This
allows the program to print out the contents of tar files or
decompress gziped files on the fly.

The default script is installed in /usr/local/share/les/lespipe,
but it can be overridden by specifying an alternate program name
with the -p option. If the script is specified as "none", then there
will be no processing of inputs.

The lespipe script is given the file name as its first argument.
If the script doesn't want to process the file, it needs to print
nothing to stdout. If the script wants to process the file, it needs
to print one line describing the type of processing, followed by
the processed content. Here is a short working example of a lespipe
script:

    #!/bin/bash
    if [ -d "$1" ]; then
        echo directory
        ls -l "$1"
    elif [[ "$1" = *.gz ]]; then
        echo gzip
        gzcat "$1"
    fi

Improvements Over less
======================

les allows keyboard commands while loading the file.

les will close the program when Ctrl-C is pressed.

les will wrap a line at word boundaries.

In less, you sometimes have to press j multiple times to go down
one wrapped line.

In less, if the line is wrapped and you move right, word wrap is
turned off and you move right, which shuffles the screen and looks
confusing.

In less, left and right movement are bound to the arrow keys when
they should be bound to h and l.

In less, there are a lot of useless command line options and key
binds that no one will use ever. For example (-a, -A, -b, -B, -c,
-C, -d, -D, -e, -E, -f, -g, -G)

Todo
====

/searching
next/prev function (C like or Perl like), highlight it too someway
next/prev if/for/while
J,K go to next/prev paragraph (maybe centering and highlighting it)
port to linux
create a man page
gpl it
?searching
tail -f
restore last line viewed on file open
unique recent file list by file name

