les
===

This is a program similar to less. It is written in C using the
terminfo and iconv libraries.

Unicode
=======

The main reason you would need ot handle unicode in a program like
this is to get the right number of characters on a line. This
requires the program to know what characters it has in it's buffer.
It can't just spit back whatever was given to it. This program will
assume the input file was utf-8. if it isn't then you can give the
correct encoding with the -e (encoding) option.

Even more than knowing the amount of characters is knowing the width
of the characters, since unicode characters can be double wide or
zero width. libc includes wcwidth() and wcswidth() to do the job,
but it requires you convert your string into a wchar_t string. vim,
less, and glib opt not to do this, and they maintain the table of
character widths themselves.

I'm not using the locale's environment variables for finding a good
default encoding since nl_langinfo(CODESET) might not be supported
on all OSes and I don't want to parse the LANG, LC_ALL, or LC_CTYPE
variables.

Highlights
==========

This will highlight all on a page in blue. The one you are up to
in green. vim and less only search for things in the screen you are
on for performance reasons. This program will find all matches in
the buffer so I can show the number of matches in the status line.
It'll be a little bit slower. But it let's me do the search one
time instead of every time you go down a line.

Improvements Over less
======================

Word wrap will keep words together. less breaks words at the end of a line even if they could fit on the next line.

when less has word wrap enabled and the last line is longer than can fit on one line and you press j, less will not move to the next line. you have to press j multiple times.

while less is loading the first page, you can not enter keyboard commands.

Todo
====

8 character tabs (use the it terminfo parameter)
clear to eol each line that's output
windows line endings
tab line color should span entire row
/searching
mousewheel scroll
correct screen width when input has ansi color codes
show status line percent through file as a colored portion of a bar
clear to end of line each line you output
winch signal
may have to do everything with scrolling for speed purposes
next/prev function (C like or Perl like)
next/prev if/for/while
first calculate where your lines are at then draw the tab
clear line before writing it to avoid having to know width of line or clear tab section entirely before writing it
Movements should be best effort, if you ask for 10 lines and only have 5, move 5 lines
possibly keep bottom on screen even if the user requested to scroll past it
left/right scrolling
end_pos needs to be correct after move_backward
q closes one tab only, Q closes all
help text in a browsable tab
file browser
shorten file names in tabs till they all fit on one line, at last resort do "1 2 3 4 5", if more than that "file1 file2 ..." maybe.
